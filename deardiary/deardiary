#!/usr/bin/env bash

# Decription: lock (encrypt) and unlock (decrypt) a plain-text diary file
# Author: Curtis Kneisel
# GitHub: https://github.com/curtis86/my-scripts

set -u
set -o pipefail

# Edit this if you want to change the path and/or filename of your diary file
filename="mydiary"

decryptedExtension="txt"
encryptedExtension="lock"
encryptedFileName="${filename}.${encryptedExtension}"
decrytpedFileName="${filename}.${decryptedExtension}"
editor="vim"

function usage() {
echo -e "Usage:
$( basename "$0" ) <option>

Options:
  lock\t\tLocks diary
  unlock\tUnlocks diary
  edit\t\tEdit diary
  check\t\tChecks if diary is encrypted or not
"

}

function yesno() {
  local _ans
  echo
  echo -n "$* <y/n> "
  read -r _ans < /dev/tty
  case "${_ans}" in
    y|Y) return 0 ;;
    *) return 1 ;;
  esac
}

function is_enc() {
  export _is_enc_output
  if _is_enc_output="$( file "$1" | grep "openssl enc'd data with salted password" 2>&1 )" ; then
    return 0
  else
    return 1
  fi
}

function lock() {
  export _lock_output
  if [ "$( check_state )" == "decrypted" ]; then
    if yesno "Lock file?" ; then
      if _lock_output="$( openssl des3 -in ${decrytpedFileName} -out ${encryptedFileName} 2>&1 )" ; then
        echo "File locked!"
        rm "${decrytpedFileName}"
      else
        echo "Failed to lock file: "
        echo "${_lock_output}"
        exit 1
      fi
    else
      echo "Skipping."
      exit 
    fi
  else
    echo
    echo "Error: file is not in decrypted state. Cannot encrypt."
  fi
}

function unlock() {
  export _unlock_output
  if [ "$( check_state )" == "encrypted" ]; then
    if yesno "Unlock file?" ; then
      if _unlock_output="$( openssl des3 -d -in ${encryptedFileName} -out ${decrytpedFileName} 2>&1 )" ; then
        echo "File unlocked!"
        rm "${encryptedFileName}"
      else
        rm "${decrytpedFileName}"
        echo "Failed to unlock file: "
        echo "${_unlock_output}"
        exit 1
      fi
    else
      echo "Skipping."
      exit 
    fi
  else
    echo
    echo "Error: file is not in encrypted state. Cannot decrypt."
  fi
}

function check_state() {
  if [[ ! -f "${encryptedFileName}" ]] && [[ ! -f "${decrytpedFileName}" ]]; then
    echo
    state="not_found"
  elif [ -f "${encryptedFileName}" ]; then
    if is_enc "${encryptedFileName}" ; then
      state="encrypted"
    else
      state="decrypted"
    fi
  elif [ -f "${decrytpedFileName}" ]; then
      state="decrypted"
  fi
  [ -z "${state}" ] && state="unknown"
  echo "${state}"
}

function askedit() {
  if yesno "Do you want to open file ${decrytpedFileName} ?" ; then
    "${editor}" "${decrytpedFileName}"
  fi
}

main() {
  OPTS=( "$@" )

  # Check filenames
  if [ "${encryptedFileName}" == "${decrytpedFileName}" ]; then
    echo
    echo "Error: encrypted and decrypted filenames cannot be the same."
    exit 1
  fi

  # If nothing exists yet, ask to create it
  if [[ ! -f "${encryptedFileName}" ]] && [[ ! -f "${decrytpedFileName}" ]]; then
    if yesno "Encrypted or decrypted file not found. Create new DECRYPTED file? (${decrytpedFileName})" ; then
      if touch "${decrytpedFileName}" && chmod 0600 "${decrytpedFileName}" ; then
        echo "New file ${decrytpedFileName} created."
      fi
    else
      echo "Exiting" && exit 0
    fi
  fi

  [ $# -eq 0 ] && { echo && echo "No options set." && usage ;  exit ;}

  export state

  for option in "${OPTS[@]}" ; do
    case "${option}" in
      lock) lock ;;
      unlock) unlock && askedit ;;
      edit) "${editor}" ;;
      check) echo "The file state is currently: $( check_state ) "  ;;
      *) usage && exit 1 ;;
    esac
    shift
  done

}; main "$@"
